# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Coverage

on: [push]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8 ]

    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas
        pip install numpy
    - run: sudo apt update
    - run: sudo apt install inotify-tools
    - run: inotifywait -mr /home/runner/work/commons-lang/commons-lang/ --format '%T;%w;%f;%e' --timefmt %T -o /home/runner/inotify-logs.csv & echo 'basak'
    - run: touch starting_build_uses32_32
    - run: rm starting_build_uses32_32
    - uses: actions/checkout@v3.0.2
    - run: touch starting_build_uses33_33
    - run: rm starting_build_uses33_33
    - uses: actions/cache@v3.0.8
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - run: touch starting_build_SetupJDKmatrixjava_39
    - run: rm starting_build_SetupJDKmatrixjava_39
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
    - run: touch starting_build_BuildwithMaven_44
    - run: rm starting_build_BuildwithMaven_44
    - name: Build with Maven
      run: mvn -V test jacoco:report --file pom.xml --no-transfer-progress

    - run: touch starting_build_UploadcoveragetoCodecov_47
    - run: rm starting_build_UploadcoveragetoCodecov_47
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./target/site/jacoco/jacoco.xml
    - run: cat /home/runner/inotify-logs.csv
    - run: touch starting_finished_finished_8979874
    - run: rm starting_finished_finished_8979874
    - uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import pandas as pd
          import numpy as np
          import os
          df = pd.read_csv('/home/runner/inotify-logs.csv', sep = ';', names=['time', 'watched_filename', 'event_filename', 'event_name'])
          df['event_filename'] = df['event_filename'].replace(np.nan, '')
          steps = {}
          starting_indexes = df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'CREATE')].index.to_list() + [df.shape[0]]
          ending_indexes = [0] + df[(df['event_filename'].str.contains('starting_')) & (df['event_name'] == 'DELETE')].index.to_list()
          starting_df = df[df['event_filename'].str.contains('starting_')]
          touch_file_names = ['setup'] + [x.replace('starting_', '') for x in starting_df['event_filename'].value_counts().index.to_list()]
          for starting_index, ending_index, touch_file_name in zip(starting_indexes, ending_indexes, touch_file_names):
              steps[touch_file_name] = (ending_index, starting_index)
          df['watched_filename'] = df['watched_filename'] + df['event_filename']
          df.drop('event_filename', axis=1, inplace=True)
          df.rename(columns={'watched_filename':'file_name'}, inplace=True)
          modify_df = df[df['event_name'] == 'MODIFY']
          file_names = modify_df['file_name'].value_counts().index.to_list()
          info = []
          for file_name in file_names:
              last_access_step = ''
              last_modify_step = ''
              creation_step = ''
              if df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].shape[0] == 0: last_modify_index = -1
              else: last_modify_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'MODIFY')].index.to_list()[-1]
              last_access_index = 0
              if df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].shape[0] > 0:
                  last_access_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'ACCESS')].index.to_list()[-1]
              else:
                  last_access_index = -1
                  last_access_step = 'Not provided'
              if last_access_index < last_modify_index:
                  try:
                      creation_index = df[(df['file_name'] == file_name) & (df['event_name'] == 'CREATE')].index.to_list()[0]
                  except:
                      creation_index = -1
                      creation_step = 'Not provided'
                  for touch_file_name, (starting_index, ending_index) in steps.items():
                      if (last_access_index > starting_index) and (last_access_index < ending_index):
                          last_access_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                      if (last_modify_index > starting_index) and (last_modify_index < ending_index):
                          last_modify_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                      if (creation_index > starting_index) and (creation_index < ending_index):
                          creation_step = touch_file_name if touch_file_name == 'setup' else touch_file_name.split('_')[1]
                  if '/home/runner/work/commons-lang/commons-lang/.git/' not in file_name:
                      info.append({'file_name': file_name, 'last_access_index': last_access_index, 'last_modify_index': last_modify_index, 'creation_index': creation_index, 'last_access_step':last_access_step , 'last_modify_step':last_modify_step, 'creation_step': creation_step})
          info_df = pd.DataFrame(info)
          step_statistics = []
          for step, (starting_index, ending_index) in steps.items():
              step_name = step if step == 'setup' else step.split('_')[1]
              if step_name == 'finished': continue
              c = info_df['creation_step'] == step_name
              m = info_df['last_modify_step'] == step_name
              a = info_df['last_access_index'] > -1
              t = info_df['last_access_index'] > info_df['last_modify_index'] # never accessed after last modify (but accessed at least once)
              cma = info_df[c & m & a].shape[0]
              cma_ = info_df[c & m & ~a].shape[0]
              cmt = info_df[c & m & t].shape[0]
              cm_a = info_df[c & ~m & a].shape[0]
              cm_a_ = info_df[c & ~m & ~a].shape[0]
              cm_t = info_df[c & ~m & t].shape[0]
              c_ma = info_df[~c & m & a].shape[0]
              c_ma_ = info_df[~c & m & ~a].shape[0]
              c_mt = info_df[~c & m & t].shape[0]
              c_m_a = info_df[~c & ~m & a].shape[0]
              c_m_a_ = info_df[~c & ~m & ~a].shape[0]
              c_m_t = info_df[~c & ~m & t].shape[0]
              created_file_count = info_df[c].shape[0]
              modified_file_count = info_df[m].shape[0]
              starting_time = list(map(int, df.iloc[starting_index]['time'].split(':')))
              if ending_index == len(df): ending_time = list(map(int, df.iloc[ending_index-1]['time'].split(':')))
              else: ending_time = list(map(int, df.iloc[ending_index]['time'].split(':')))
              hour = ending_time[0] - starting_time[0]
              if starting_time[1] > ending_time[1]:
                  minute = ending_time[1] - starting_time[1] + 60
                  hour -= 1
              else: minute = ending_time[1] - starting_time[1]
              if starting_time[2] > ending_time[2]:
                  second = ending_time[2] - starting_time[2] + 60
                  minute -= 1
              else: second = ending_time[2] - starting_time[2]
              total_seconds = second + (minute * 60) + (hour * 60 * 60)
              if step_name != '':
                  step_statistics.append({'step_name': step_name, '#c': created_file_count, '#m': modified_file_count, 
                  'cma': cma, 'cma_': cma_, 'cmt': cmt, 'cm_a': cm_a, 'cm_a_': cm_a_, 'cm_t': cm_t, 'c_ma': c_ma, 'c_ma_': c_ma_, 'c_mt': c_mt, 'c_m_a': c_m_a, 'c_m_a_': c_m_a_, 'c_m_t': c_m_t, 'time': total_seconds})
          os.mkdir('optimizing-ci-builds-ci-analysis')
          step_df = pd.DataFrame(step_statistics)
          step_df.to_csv('/home/runner/work/commons-lang/commons-lang/optimizing-ci-builds-ci-analysis/steps.csv')
          info_df.to_csv('/home/runner/work/commons-lang/commons-lang/optimizing-ci-builds-ci-analysis/files.csv')
    - run: cp /home/runner/inotify-logs.csv /home/runner/work/commons-lang/commons-lang/optimizing-ci-builds-ci-analysis/
    - name: Pushes analysis to another repository
      id: push_directory
      uses: cpina/github-action-push-to-another-repository@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source-directory: 'optimizing-ci-builds-ci-analysis'
        destination-github-username: 'optimizing-ci-builds'
        destination-repository-name: 'ci-analyzes'
        target-directory: 'commons-lang/1666737484/.github/workflows/coverage/build'

